generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// TODO: very very carefully prune through which models/relations need onDelete: Cascade or some
// variation

model BlacklistedEmail {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())

    emailAddress String @unique

    @@index([emailAddress])
}

model EmailUnsubscriptionToken {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    expiresAt DateTime // 3 months from createdAt, ample time for customer to click the link if they want

    emailAddress String
}

model Chat {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userFullName String @default("Customer")

    userHasUnreadMessages      Boolean @default(false)
    dashboardHasUnreadMessages Boolean @default(false)

    messages ChatMessage[]

    user   User?  @relation(fields: [userId], references: [userId])
    userId String @unique
}

model ChatMessage {
    id          String   @id @default(uuid())
    createdAt   DateTime @default(now())
    senderId    String
    recipientId String
    content     String

    Chat   Chat   @relation(fields: [chatId], references: [id])
    chatId String
}

model Review {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())

    message           String
    allowedToBePublic Boolean

    order   Order  @relation(fields: [orderId], references: [id])
    orderId String

    user   User   @relation(fields: [userId], references: [userId])
    userId String
}

model MinimumOrderPickupTime {
    id Int @id @default(1)

    value DateTime @default(now()) // will get reset to midnight of current day every day by a cron job
}

model FavoriteItem {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())

    menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
    menuItemId String
    user       User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
    userId     String
}

model MenuCategory {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())

    name            String
    active          Boolean @default(true) // probably useful for seasonal categories
    orderableOnline Boolean @default(true) // whether category can be ordered online
    listOrder       Int     @default(autoincrement())

    menuItems        MenuItem[]
    activeDiscount   Discount?  @relation(fields: [activeDiscountId], references: [id])
    activeDiscountId String?
}

model MenuItem {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())

    name         String
    description  String
    imageUrl     String
    price        Float
    altPrice     Float? // used for singular glass pricing of wine/beer
    available    Boolean @default(true) // whether item is able to be ordered (86'd or not)
    discontinued Boolean @default(false) // whether item is no longer on the menu
    listOrder    Int     @default(autoincrement())

    menuCategory     MenuCategory @relation(fields: [menuCategoryId], references: [id])
    menuCategoryId   String
    activeDiscount   Discount?    @relation(fields: [activeDiscountId], references: [id])
    activeDiscountId String?

    isChefsChoice                  Boolean @default(false)
    isAlcoholic                    Boolean @default(false)
    isVegetarian                   Boolean @default(false)
    isVegan                        Boolean @default(false)
    isGlutenFree                   Boolean @default(false)
    showUndercookedOrRawDisclaimer Boolean @default(false)

    isRewardItem Boolean @default(false)
    reviews      String? // max three hand-picked reviews, separated/delimited by " | "

    favoriteItem            FavoriteItem[]
    customizationCategories MenuItemCustomizationCategory[]
    orderItem               OrderItem[]
}

model CustomizationCategory {
    id              String @id @default(uuid())
    name            String // e.g., "Size", "Toppings"
    description     String // e.g., "Select your drink size"
    defaultChoiceId String

    internalName String @default("") // used for internal distinction purposes, e.g., "Pho sides" vs "Platter sides"

    menuItems              MenuItemCustomizationCategory[]
    customizationChoices   CustomizationChoice[]
    orderItemCustomization OrderItemCustomization[]
}

model CustomizationChoice {
    id              String  @id @default(uuid())
    name            String // e.g., "Small", "Medium", "Large" for Size
    description     String // e.g., "12 oz", "16 oz", "20 oz" for Size, or description of side dish if applicable
    priceAdjustment Float // Additional cost for this choice, can be negative
    isAvailable     Boolean @default(true)
    listOrder       Int     @default(autoincrement())

    customizationCategory   CustomizationCategory    @relation(fields: [customizationCategoryId], references: [id])
    customizationCategoryId String
    orderItemCustomization  OrderItemCustomization[]
}

// Join table for MenuItem and CustomizationCategory
model MenuItemCustomizationCategory {
    id String @id @default(uuid())

    menuItemId              String
    customizationCategoryId String
    menuItem                MenuItem              @relation(fields: [menuItemId], references: [id])
    customizationCategory   CustomizationCategory @relation(fields: [customizationCategoryId], references: [id])

    @@index([menuItemId, customizationCategoryId])
}

// used to store the order details so before stripe session is created
// so that upon completion the stripe webhook can fetch the order details
// and properly create the Order row in the database
model TransientOrder {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())

    details Json
    userId  String @unique // not related to User model so that customers can still place order as a guest
}

// BTW, if you come back to this and wonder why we have so much "duplicate" information on below Order
// models, there is some crossover for sure, but I think keeping them separate is the best way to go
// especially if menu items change, or discounts change, etc. This way we can keep a record of what was
// ordered at the time of the order for historical purposes. Also, it makes it easier to track down
// what was ordered if a menu item is deleted or changed in the future.

model OrderItem {
    id                         String  @id @default(uuid())
    name                       String
    specialInstructions        String
    includeDietaryRestrictions Boolean
    quantity                   Int
    price                      Float

    order      Order    @relation(fields: [orderId], references: [id])
    orderId    String
    menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
    menuItemId String

    // only need to store discount relation here so that when looking at tracking/recent orders
    // you can see why a price for an item would be different across orders.
    discount   Discount? @relation(fields: [discountId], references: [id])
    discountId String?

    // TODO: are these fields below necessary? I thought maybe the isAlcoholic one was for when
    // reordering an order that had an alcoholic item in it, but I think that can be inferred
    // to be valid if the original order was valid. Maybe just remove these fields if you can be 100%
    // sure that they aren't necessary
    isChefsChoice                  Boolean @default(false)
    isAlcoholic                    Boolean @default(false)
    isVegetarian                   Boolean @default(false)
    isVegan                        Boolean @default(false)
    isGlutenFree                   Boolean @default(false)
    showUndercookedOrRawDisclaimer Boolean @default(false)

    pointReward    Boolean @default(false)
    birthdayReward Boolean @default(false)

    customizations OrderItemCustomization[]
}

model OrderItemCustomization {
    id String @id @default(uuid())

    orderItem               OrderItem             @relation(fields: [orderItemId], references: [id])
    orderItemId             String
    customizationCategory   CustomizationCategory @relation(fields: [customizationCategoryId], references: [id])
    customizationCategoryId String
    customizationChoice     CustomizationChoice   @relation(fields: [customizationChoiceId], references: [id])
    customizationChoiceId   String
}

model Order {
    id        String   @id @default(uuid()) // first 6 digits will be used for any customer-facing order number
    createdAt DateTime @default(now())

    orderStartedAt   DateTime?
    orderCompletedAt DateTime?
    datetimeToPickup DateTime

    firstName                 String
    lastName                  String
    email                     String
    phoneNumber               String?
    includeNapkinsAndUtensils Boolean @default(false)
    dietaryRestrictions       String?

    orderItems OrderItem[]
    discount   Discount?   @relation(fields: [discountId], references: [id])
    discountId String?

    subtotal      Float
    tax           Float
    tipPercentage Int?
    tipValue      Float
    total         Float

    prevRewardsPoints   Int
    earnedRewardsPoints Int
    spentRewardsPoints  Int

    stripeSessionId String @unique // used for tracking the order in Stripe

    notableUserDescription String?
    rewardsPointsRedeemed  Boolean @default(false)
    userLeftFeedback       Boolean @default(false)

    user   User?   @relation(fields: [userId], references: [userId])
    userId String?

    reviews Review[] // these are just the direct reviews on the order, so that the dashboard can show the user's order
    // alongside their feedback. This isn't to be confused with the to be made "MenuItemReview" model

    reward          Reward[]
    orderPrintQueue OrderPrintQueue[]
}

model OrderPrintQueue {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())

    order   Order  @relation(fields: [orderId], references: [id])
    orderId String
}

model Reward {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    expiresAt DateTime

    active  Boolean @default(true)
    expired Boolean @default(false)
    value   Int

    partiallyRedeemed Boolean @default(false)

    order   Order?  @relation(fields: [orderId], references: [id])
    orderId String?

    user   User   @relation(fields: [userId], references: [userId])
    userId String

    @@index([id, userId])
}

model Discount {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())

    name           String
    description    String // maybe show this on user's rewards page w/ like "Enjoy a {item1} or {item2} 15% off this weekend!"
    // or something more personalized like that
    expirationDate DateTime
    active         Boolean  @default(true)

    menuCategory MenuCategory[]
    menuItem     MenuItem[]
    orderItem    OrderItem[]

    Order Order[]

    user   User?   @relation(fields: [userId], references: [userId], onDelete: Cascade)
    userId String?

    @@index([id, userId]) // TODO: is this the right way to do this? and do you want to index the userId field on User model?
}

model User {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())

    userId       String @unique // retrieved from Clerk
    stripeUserId String @unique

    firstName           String
    lastName            String
    email               String   @unique
    phoneNumber         String   @unique
    birthday            DateTime
    dietaryRestrictions String

    allowsEmailReceipts                    Boolean @default(true)
    allowsOrderCompleteEmails              Boolean @default(true)
    allowsPromotionalEmails                Boolean @default(true)
    allowsRewardAvailabilityReminderEmails Boolean @default(true)

    rewardsPoints        Int @default(500) // TODO: most likely change this later
    lifetimeRewardPoints Int @default(0)

    lastBirthdayRewardRedemptionYear Int @default(0)

    currentOrder Json?

    recentOrders  Order[]
    rewards       Reward[]
    favoriteItems FavoriteItem[]
    discounts     Discount[]
    reviews       Review[]
    chat          Chat?

    @@index([userId])
}
