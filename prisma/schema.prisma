generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// TODO: very very carefully prune through which models/relations need onDelete: Cascade or some
// variation

model Chat {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userHasUnreadMessages      Boolean @default(false)
    dashboardHasUnreadMessages Boolean @default(false)

    messages ChatMessage[]

    user   User?  @relation(fields: [userId], references: [userId])
    userId String @unique
}

model ChatMessage {
    id          String   @id @default(uuid())
    createdAt   DateTime @default(now())
    senderId    String
    recipientId String
    content     String

    Chat   Chat   @relation(fields: [chatId], references: [id])
    chatId String
}

model Review {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())

    message           String
    allowedToBePublic Boolean

    order   Order  @relation(fields: [orderId], references: [id])
    orderId String

    user   User   @relation(fields: [userId], references: [userId])
    userId String
}

model MinimumOrderPickupTime {
    id Int @id @default(1)

    value DateTime @default(now()) // will get reset to midnight of current day every day by a cron job
}

model FavoriteItem {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())

    menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
    menuItemId String
    user       User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
    userId     String
}

model SuggestedPairing {
    id String @id @default(uuid())

    foodMenuItem    MenuItem @relation("FoodMenuItem", fields: [foodMenuItemId], references: [id])
    foodMenuItemId  String
    drinkMenuItem   MenuItem @relation("DrinkMenuItem", fields: [drinkMenuItemId], references: [id])
    drinkMenuItemId String
}

model MenuCategory {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())

    name            String
    active          Boolean @default(true) // probably useful for seasonal categories
    orderableOnline Boolean @default(true) // whether category can be ordered online
    listOrder       Int     @default(autoincrement())

    menuItems        MenuItem[]
    activeDiscount   Discount?  @relation(fields: [activeDiscountId], references: [id])
    activeDiscountId String?
}

model MenuItem {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())

    name             String
    description      String
    imageUrl         String
    price            Float
    altPrice         Float? // used for singular glass pricing of wine/beer
    ingredientsPrice Float // never expose to the frontend, maybe have it only on w/e backend stats calculation function(s)
    // or in it's own model in here, tied to MenuItem by id
    available        Boolean @default(true) // whether item is able to be ordered (86'd or not)
    discontinued     Boolean @default(false) // whether item is no longer on the menu
    listOrder        Int     @default(autoincrement())

    menuCategory     MenuCategory @relation(fields: [menuCategoryId], references: [id])
    menuCategoryId   String
    activeDiscount   Discount?    @relation(fields: [activeDiscountId], references: [id])
    activeDiscountId String?

    isAlcoholic  Boolean @default(false)
    isVegetarian Boolean @default(false)
    isRewardItem Boolean @default(false)
    chefsChoice  Boolean @default(false)
    reviews      String? // max three hand-picked reviews, separated/delimited by " | "

    favoriteItem            FavoriteItem[]
    customizationCategories CustomizationCategory[]
    orderItem               OrderItem[]

    suggestedPairings SuggestedPairing[] @relation("FoodMenuItem")
    suggestedWith     SuggestedPairing[] @relation("DrinkMenuItem")
}

model CustomizationCategory {
    id          String @id @default(uuid())
    name        String // e.g., "Size", "Toppings"
    description String // e.g., "Select your drink size"

    defaultChoiceId String

    menuItem               MenuItem[]
    customizationChoices   CustomizationChoice[]
    orderItemCustomization OrderItemCustomization[]
}

model CustomizationChoice {
    id              String @id @default(uuid())
    name            String // e.g., "Small", "Medium", "Large" for Size
    description     String // e.g., "12 oz", "16 oz", "20 oz" for Size, or description of side dish if applicable
    priceAdjustment Float // Additional cost for this choice, can be negative

    customizationCategory   CustomizationCategory    @relation(fields: [customizationCategoryId], references: [id])
    customizationCategoryId String
    orderItemCustomization  OrderItemCustomization[]
}

// used to store the order details so before stripe session is created
// so that upon completion the stripe webhook can fetch the order details
// and properly create the Order row in the database
model TransientOrder {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())

    details Json
    userId  String @unique // not related to User model so that customers can still place order as a guest
}

// BTW, if you come back to this and wonder why we have so much "duplicate" information on below Order
// models, there is some crossover for sure, but I think keeping them separate is the best way to go
// especially if menu items change, or discounts change, etc. This way we can keep a record of what was
// ordered at the time of the order for historical purposes. Also, it makes it easier to track down
// what was ordered if a menu item is deleted or changed in the future.

model OrderItem {
    id                         String  @id @default(uuid())
    name                       String
    specialInstructions        String
    includeDietaryRestrictions Boolean
    quantity                   Int
    price                      Float

    order      Order    @relation(fields: [orderId], references: [id])
    orderId    String
    menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
    menuItemId String

    // only need to store discount relation here so that when looking at tracking/recent orders
    // you can see why a price for an item would be different across orders.
    discount   Discount? @relation(fields: [discountId], references: [id])
    discountId String?

    isAlcoholic  Boolean @default(false) // technically this shouldn't have a default but I don't think it is high priority
    isVegetarian Boolean @default(false)

    pointReward    Boolean @default(false)
    birthdayReward Boolean @default(false)

    customizations OrderItemCustomization[]
}

model OrderItemCustomization {
    id String @id @default(uuid())

    orderItem               OrderItem             @relation(fields: [orderItemId], references: [id])
    orderItemId             String
    customizationCategory   CustomizationCategory @relation(fields: [customizationCategoryId], references: [id])
    customizationCategoryId String
    customizationChoice     CustomizationChoice   @relation(fields: [customizationChoiceId], references: [id])
    customizationChoiceId   String
}

model Order {
    id        String   @id @default(uuid()) // first 6 digits will be used for any customer-facing order number
    createdAt DateTime @default(now())

    orderStartedAt   DateTime?
    orderCompletedAt DateTime?
    datetimeToPickup DateTime

    // TODO: remove status, just infer from orderStartedAt and orderCompletedAt
    status                    String  @default("received") // "received", "inProgress", "completed" (maybe "cancelled" too?)
    firstName                 String
    lastName                  String
    email                     String
    phoneNumber               String?
    includeNapkinsAndUtensils Boolean @default(false)
    dietaryRestrictions       String? // gets queried for and added on /websocket if user has dietary restrictions and has 1+ item in order that has dietary restrictions boolean as true

    orderItems OrderItem[]
    discount   Discount?   @relation(fields: [discountId], references: [id])
    discountId String?

    prevRewardsPoints   Int
    earnedRewardsPoints Int
    spentRewardsPoints  Int

    stripeSessionId String @unique // used for tracking the order in Stripe

    userLeftFeedback Boolean @default(false)

    // could have the userDescription field on here to be populated by chatGPT response to if
    // the user is noteworthy. Prob want to delay this until order is first created though, just a setTimeout()
    // in prisma .create method?
    user   User?   @relation(fields: [userId], references: [userId])
    userId String?

    reviews Review[] // these are just the direct reviews on the order, so that the dashboard can show the user's order
    // alongside their feedback. This isn't to be confused with the to be made "MenuItemReview" model

    reward          Reward[]
    orderPrintQueue OrderPrintQueue[]
}

model OrderPrintQueue {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())

    order   Order  @relation(fields: [orderId], references: [id])
    orderId String
}

model Reward {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    expiresAt DateTime

    active  Boolean @default(true)
    expired Boolean @default(false)
    value   Int

    partiallyRedeemed Boolean @default(false)

    order   Order?  @relation(fields: [orderId], references: [id])
    orderId String?

    user   User   @relation(fields: [userId], references: [userId])
    userId String

    @@index([id, userId])
}

model Discount {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())

    name           String
    description    String // maybe show this on user's rewards page w/ like "Enjoy a {item1} or {item2} 15% off this weekend!"
    // or something more personalized like that
    expirationDate DateTime
    active         Boolean  @default(true)

    menuCategory MenuCategory[]
    menuItem     MenuItem[]
    orderItem    OrderItem[]

    Order Order[]

    user   User?   @relation(fields: [userId], references: [userId], onDelete: Cascade)
    userId String?

    @@index([id, userId]) // TODO: is this the right way to do this? and do you want to index the userId field on User model?
}

model User {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())

    userId       String @unique // retrieved from Clerk
    stripeUserId String @unique

    firstName           String
    lastName            String
    email               String   @unique
    phoneNumber         String   @unique
    birthday            DateTime
    dietaryRestrictions String

    allowsEmailReceipts              Boolean @default(true)
    allowsOrderCompleteEmails        Boolean @default(true)
    allowsPromotionalEmails          Boolean @default(true)
    allowsRewardExpiryReminderEmails Boolean @default(true)

    rewardsPoints        Int @default(500) // TODO: most likely change this later
    lifetimeRewardPoints Int @default(0)

    lastBirthdayRewardRedemptionYear Int @default(0)

    currentOrder Json?

    recentOrders  Order[]
    rewards       Reward[]
    favoriteItems FavoriteItem[]
    discounts     Discount[]
    reviews       Review[]
    chat          Chat?

    @@index([userId])
}
